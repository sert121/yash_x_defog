{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \nYou have a two-step role: You need to come up with potential user questions that could be asked about the data. \nNow, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\nAlways follow these instructions for generating the user-question:\n1. Make sure that the questions are relevant to the data and are not ambiguous.\n2. Make sure that the questions are human-like.\n3. Make sure the question is not too confusing.\n\nAlways follow these instructions for generating the SQL query:\n1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n8. When a user asks for data by month, they are typically asking for data by both the month and year\n9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\nAs a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n{examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n```{table_metadata_ddl}```\nFollow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "What is the total net price in US dollars of subscriptions for each course?", "sql": "SELECT a.course_id, SUM(a.us_net_price) AS total_net_price FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.course_id ORDER BY total_net_price DESC;", "valid": 1}]
[{"question": "Which instructors have the most enrollments?", "sql": "SELECT a.instructor_name, COUNT (DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.instructor_name ORDER BY total_enrollments DESC NULLS LAST;", "valid": 1}]
[{"question": "How many students started their enrollment in each month of 2021?", "sql": "SELECT a.month, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2021 GROUP BY a.month ORDER BY total_enrollments DESC NULLS LAST;", "valid": 1}]
[{"question": "What's the average access duration, in days, per discipline?", "sql": "SELECT a.discipline, AVG(a.access_duration_derived) AS average_duration FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.discipline ORDER BY average_duration DESC NULLS LAST;", "valid": 1}]
[{"question": "Which publishers have the most paid enrollments?", "sql": "SELECT a.product_publisher, COUNT (DISTINCT a.unique_id) AS total_paid_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.paid_unpaid='Paid' GROUP BY a.product_publisher ORDER BY total_paid_enrollments DESC NULLS LAST;", "valid": 1}]
[{"question": "For each state, how many students have an active access subscription?", "sql": "SELECT a.sfdc_state, COUNT (DISTINCT a.unique_id) AS active_access_students FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.student_subscription_status='Active Access' GROUP BY a.sfdc_state ORDER BY active_access_students DESC NULLS LAST;", "valid": 1}]
[{"question": "How many titles are published each year by discipline and who are the authors?", "sql": "SELECT a.copyright_year, a.discipline, a.author_display_name, COUNT(DISTINCT a.project_title) as Total_Titles FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.copyright_year, a.discipline, a.author_display_name ORDER BY Total_Titles DESC NULLS LAST;", "valid": 1}]
[{"question": "What is the total number of returns requested per course in 2021?", "sql": "SELECT a.course_id, COUNT(DISTINCT a.return_request_date) AS total_returns FROM temp_achive_lp_sapling_combined_activations_ai a WHERE EXTRACT(YEAR FROM a.return_request_date) = 2021 GROUP BY a.course_id ORDER BY total_returns DESC NULLS LAST;", "valid": 1}]
[{"question": "What's the total consumer price paid, in Canadian dollars, by each student?", "sql": "SELECT a.unique_id, SUM(a.can_consumer_price) AS total_consumer_price FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.unique_id ORDER BY total_consumer_price DESC NULLS LAST;", "valid": 1}]
[{"question": "How many students have purchased from the student store per category?", "sql": "SELECT a.category, COUNT (DISTINCT a.unique_id) AS total_purchases_from_store FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.purchased_from_studentstore = 'Yes-Purchase' GROUP BY a.category ORDER BY total_purchases_from_store DESC NULLS LAST;", "valid": 1}]
