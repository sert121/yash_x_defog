{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "What is the average US net price for each division?", "sql": "SELECT a.division, AVG(a.us_net_price) AS average_net_price FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.division ORDER BY average_net_price DESC;", "valid": 1}]
[{"question": "Which region has the highest number of enrollments?", "sql": "SELECT a.region, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.region ORDER BY total_enrollments DESC NULLS LAST;", "valid": 1}]
[{"question": "How many students have used access code to enroll?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.has_used_access_code ILIKE 'Yes';", "valid": 1}]
[{"question": "How many active subscriptions are there by division?", "sql": "SELECT a.division, COUNT(a.unique_id) AS active_subscriptions FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.student_subscription_status ILIKE 'Active Access' GROUP BY a.division ORDER BY active_subscriptions DESC;", "valid": 1}]
[{"question": "Which title has the maximum subscriptions in Physics discipline?", "sql": "SELECT a.project_title, COUNT(a.unique_id) AS total_subscriptions FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.discipline ILIKE 'Physics' GROUP BY a.project_title ORDER BY total_subscriptions DESC LIMIT 1;", "valid": 1}]
[{"question": "How many enrollments are there for each product status?", "sql": "SELECT a.product_status, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.product_status ORDER BY total_enrollments DESC;", "valid": 1}]
[{"question": "Can you tell me the total number of enrollments by instructor for the category named 'Mathematics'?", "sql": "SELECT a.instructor_name, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.category ILIKE 'Mathematics' GROUP BY a.instructor_name ORDER BY total_enrollments DESC NULLS LAST;", "valid": 1}]
[{"question": "What is the distribution of paid and unpaid subscriptions across different divisions?", "sql": "SELECT a.division, a.paid_unpaid, COUNT(a.unique_id) AS count_subscriptions FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.division, a.paid_unpaid ORDER BY a.division, count_subscriptions DESC;", "valid": 1}]
[{"question": "What are the top 5 disciplines by number of subscriptions in 'Northeast Region'?", "sql": "SELECT a.discipline, COUNT(a.unique_id) AS total_subscriptions FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.region ILIKE 'Northeast Region' GROUP BY a.discipline ORDER BY total_subscriptions DESC LIMIT 5;", "valid": 1}]
[{"question": "Which courses have the highest enrollments for the author 'John Doe'?", "sql": "SELECT a.course_name, COUNT(a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.author_display_name ILIKE 'John Doe' GROUP BY a.course_name ORDER BY total_enrollments DESC;", "valid": 1}]
