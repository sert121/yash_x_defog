{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \nYou have a two-step role: You need to come up with potential user questions that could be asked about the data. \nNow, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\nAlways follow these instructions for generating the user-question:\n1. Make sure that the questions are relevant to the data and are not ambiguous.\n2. Make sure that the questions are human-like.\n3. Make sure the question is not too confusing.\n\nAlways follow these instructions for generating the SQL query:\n1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n8. When a user asks for data by month, they are typically asking for data by both the month and year\n9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\nAs a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n{examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n```{table_metadata_ddl}```\nFollow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "What are the top 5 projects by enrollments where the enrollment was started in 2021?", "sql": "SELECT a.project_title, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2021 GROUP BY a.project_title ORDER BY total_enrollments DESC LIMIT 5;", "valid": 1}]
[{"question": "Can you provide me a list of all active access users from the Southern Region?", "sql": "SELECT a.unique_id FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.region LIKE '%Southern Region%' AND a.student_subscription_status LIKE 'Active Access';", "valid": 1}]
[{"question": "What is the average net price for Canadian subscriptions on the 'STEM' division?", "sql": "SELECT AVG(a.can_net_price) AS avg_can_net_price FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.division LIKE '%STEM%';", "valid": 1}]
[{"question": "Could you tell me the number of enrollees from each territory in 2020?", "sql": "SELECT a.territory, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 GROUP BY a.territory;", "valid": 1}]
[{"question": "How many unique projects are there in the Physics discipline?", "sql": "SELECT COUNT(DISTINCT a.project_title) AS num_projects FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.discipline LIKE '%Physics%';", "valid": 1}]
[{"question": "I'd like to know how many enrollments were started on each platform in 2021.", "sql": "SELECT a.platform, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2021 GROUP BY a.platform;", "valid": 1}]
[{"question": "Which instructor had the highest enrollments in 2019?", "sql": "WITH instructor_enrollments AS ( SELECT a.instructor_name, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2019 GROUP BY a.instructor_name ) SELECT instructor_name, total_enrollments FROM instructor_enrollments ORDER BY total_enrollments DESC LIMIT 1;", "valid": 1}]
[{"question": "Can you show me the number of enrollments for each school in the Central Region?", "sql": "SELECT a.school, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.region LIKE '%Central Region%' GROUP BY a.school;", "valid": 1}]
[{"question": "What were the top 3 sources of user acquisitions for enrollments in 2020?", "sql": "SELECT a.acquisition_source, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 GROUP BY a.acquisition_source ORDER BY total_enrollments DESC LIMIT 3;", "valid": 1}]
[{"question": "What is the total net price for US subscriptions in the Mathematics discipline in 2021?", "sql": "SELECT SUM(a.us_net_price) AS total_us_net_price FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.discipline LIKE '%Mathematics%' AND a.year = 2021;", "valid": 1}]
