{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "What is the total net price and total list price in US dollars for paid subscriptions for each year?", "sql": "SELECT a.year, SUM(a.us_net_price) AS total_net_price, SUM(a.us_list_price) AS total_list_price FROM temp_achive_lp_sapling_combined_activations_ai a WHERE LOWER(a.paid_unpaid) = 'paid' GROUP BY a.year ORDER BY a.year NULLS LAST;", "valid": 1}]
[{"question": "Can you give me the count of unique enrollments per discipline for each year?", "sql": "SELECT a.year, a.discipline, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.year, a.discipline ORDER BY a.year, total_enrollments DESC NULLS LAST;", "valid": 1}]
[{"question": "Could you tell me the total duration of access for each unique course each year?", "sql": "SELECT a.year, a.course, SUM(a.access_duration_derived) AS total_duration FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.year, a.course ORDER BY a.year, total_duration DESC NULLS LAST;", "valid": 1}]
[{"question": "How many subscriptions were purchased from the student store and how many were due to inclusive access each year?", "sql": "SELECT a.year, COUNT(a.unique_id) FILTER ( WHERE a.purchased_from_studentstore ILIKE 'Yes-Purchase' ) AS purchased_from_store, COUNT(a.unique_id) FILTER ( WHERE a.inclusive_access ILIKE 'Yes' ) AS via_inclusive_access FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.year ORDER BY a.year NULLS LAST;", "valid": 1}]
[{"question": "Which were the top 5 disciplines with the most enrollments each year? ", "sql": "WITH ranked_disciplines AS (SELECT a.year, a.discipline, COUNT(DISTINCT a.unique_id) AS total_enrollments, RANK() OVER (PARTITION BY a.year ORDER BY COUNT(DISTINCT a.unique_id) DESC) AS rank FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.year, a.discipline ) SELECT year, discipline, total_enrollments FROM ranked_disciplines WHERE rank <= 5 ORDER BY year, rank ;", "valid": 1}]
[{"question": "Can you show me the number of enrollments by month for the Physics discipline? ", "sql": "SELECT a.month, a.year, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.discipline ILIKE '%Physics%' GROUP BY a.month, a.year ORDER BY a.year, a.month NULLS LAST;", "valid": 1}]
[{"question": "Please provide a count of all active versus expired access for each year. ", "sql": "SELECT a.year, COUNT(a.unique_id) FILTER ( WHERE a.student_subscription_status ILIKE 'Active Access' ) AS active_access, COUNT(a.unique_id) FILTER ( WHERE a.student_subscription_status ILIKE 'Expired Access' ) AS expired_access FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.year ORDER BY a.year NULLS LAST;", "valid": 1}]
[{"question": "What are the top 10 courses with the most enrollments in the year 2020?", "sql": "SELECT a.course, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 GROUP BY a.course ORDER BY total_enrollments DESC NULLS LAST LIMIT 10;", "valid": 1}]
[{"question": "Can you fetch the instructors who have more than 1000 enrollments for their courses over the years?", "sql": "SELECT a.instructor_name, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.instructor_name HAVING COUNT(DISTINCT a.unique_id) > 1000;", "valid": 1}]
[{"question": "Could you show me the top 5 project titles for the Humanities division based on enrollments?", "sql": "WITH ranked_projects AS (SELECT a.project_title, COUNT(DISTINCT a.unique_id) AS total_enrollments, RANK() OVER (ORDER BY COUNT(DISTINCT a.unique_id) DESC) AS rank FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.division ILIKE '%Humanities%' GROUP BY a.project_title ) SELECT project_title, total_enrollments FROM ranked_projects WHERE rank <= 5 ORDER BY rank;", "valid": 1}]
