{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "Can you provide me the list of all unique students who purchased a subscription from the student store for the year 2020?", "sql": "SELECT a.unique_id FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.purchased_from_studentstore = 'Yes-Purchase' AND a.year = 2020;", "valid": 1}]
[{"question": "What is the average duration of access for subscriptions paid by consumers in US dollars?", "sql": "SELECT AVG(a.access_duration_derived) as average_duration_in_days FROM temp_achive_lp_sapling_combined_activations_ai a WHERE LOWER(a.paid_unpaid) = 'paid' and a.us_consumer_price IS NOT NULL;", "valid": 1}]
[{"question": "How many subscriptions have been returned so far?", "sql": "SELECT COUNT(a.unique_id) as total_returns FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.return_request_date IS NOT NULL;", "valid": 1}]
[{"question": "What is the total count of subscriptions per discipline for the STEM division?", "sql": "SELECT a.discipline, COUNT(a.unique_id) AS total_subscriptions FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.division = 'STEM' GROUP BY a.discipline;", "valid": 1}]
[{"question": "Can you give me the top 5 authors who have the maximum number of enrollments?", "sql": "SELECT a.author_display_name, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.author_display_name ORDER BY total_enrollments DESC LIMIT 5;", "valid": 1}]
[{"question": "List the subscriptions for the Humanities division that were acquired through 'Direct Mail' ", "sql": "SELECT a.unique_id FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.division = 'Humanities' AND a.acquisition_source = 'Direct Mail';", "valid": 1}]
[{"question": "Which course had the highest number of enrollments in the year 2021?", "sql": "SELECT a.course_name, COUNT(a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2021 GROUP BY a.course_name ORDER BY total_enrollments DESC LIMIT 1;", "valid": 1}]
[{"question": "How many users have an active access status in the Central Region?", "sql": "SELECT COUNT(a.unique_id) as total_active_users FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.region = 'Central Region' AND a.student_subscription_status = 'Active Access';", "valid": 1}]
[{"question": "Show the total amount paid by consumers for all the subscriptions in Canadian dollars.", "sql": "SELECT SUM(a.can_consumer_price) as total_paid_in_CAD FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.can_consumer_price IS NOT NULL;", "valid": 1}]
[{"question": "List the enrollments for each project title with 'Paid' status for the year 2022.", "sql": "SELECT a.project_title, COUNT(a.unique_id) as total_paid_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2022 AND LOWER(a.paid_unpaid) = 'paid' GROUP BY a.project_title;", "valid": 1}]
