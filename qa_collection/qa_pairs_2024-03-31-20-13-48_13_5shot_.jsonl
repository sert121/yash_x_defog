{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \nYou have a two-step role: You need to come up with potential user questions that could be asked about the data. \nNow, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\nAlways follow these instructions for generating the user-question:\n1. Make sure that the questions are relevant to the data and are not ambiguous.\n2. Make sure that the questions are human-like.\n3. Make sure the question is not too confusing.\n\nAlways follow these instructions for generating the SQL query:\n1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n8. When a user asks for data by month, they are typically asking for data by both the month and year\n9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\nAs a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n{examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n```{table_metadata_ddl}```\nFollow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "What are the top 10 disciplines with the most enrollments?", "sql": "SELECT a.discipline, COUNT(DISTINCT a.unique_id) AS total_enrollments \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.discipline \nORDER BY total_enrollments DESC LIMIT 10;", "valid": 1}]
[{"question": "Who are the top 10 instructors with the highest enrollment students?", "sql": "SELECT a.instructor_name, COUNT(DISTINCT a.unique_id) AS total_enrollments \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.instructor_name \nORDER BY total_enrollments DESC LIMIT 10;", "valid": 1}]
[{"question": "What are the total enrollments for the current year and for the same duration last year?", "sql": "WITH current_year_enrollment AS (\n SELECT a.year, COUNT(DISTINCT a.unique_id) AS total_enrollments \n FROM temp_achive_lp_sapling_combined_activations_ai a \n WHERE a.year = EXTRACT(YEAR FROM CURRENT_DATE) \n AND a.subscription_created_date <= CURRENT_DATE \n GROUP BY a.year),\nlast_year_enrollment AS (\n SELECT a.year,  COUNT(DISTINCT a.unique_id) AS total_enrollments \n FROM temp_achive_lp_sapling_combined_activations_ai a \n WHERE a.year = EXTRACT(YEAR FROM CURRENT_DATE) - 1 \n AND a.subscription_created_date <= CURRENT_DATE - INTERVAL '1 year' \n GROUP BY a.year)\nSELECT * FROM current_year_enrollment \nUNION \nSELECT * from last_year_enrollment;", "valid": 1}]
[{"question": "What are the top 5 courses with the highest enrollments?", "sql": "SELECT a.course_name, COUNT(DISTINCT a.unique_id) AS total_enrollments \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.course_name \nORDER BY total_enrollments DESC LIMIT 5;", "valid": 1}]
[{"question": "Which schools have the maximum enrollments for Humanities division?", "sql": "SELECT a.school, COUNT(DISTINCT a.unique_id) AS total_enrollments \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE LOWER(a.division) = 'humanities' \nGROUP BY a.school \nORDER BY total_enrollments DESC;", "valid": 1}]
[{"question": "How many students bought their subscriptions from the student store?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS total_purchases \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE LOWER(a.purchased_from_studentstore) = 'yes-purchase';", "valid": 1}]
[{"question": "What is the total revenue in US dollars for the current year?", "sql": "SELECT SUM(a.us_consumer_price) AS total_revenue_USD \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.year = EXTRACT(YEAR FROM CURRENT_DATE);", "valid": 1}]
[{"question": "How many students have a status of “Active Access” in their subscriptions?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS total_active_access \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE LOWER(a.student_subscription_status) = 'active access';", "valid": 1}]
[{"question": "What are the top 5 acquisition sources leading to maximum enrollments?", "sql": "SELECT a.acquisition_source, COUNT(DISTINCT a.unique_id) AS total_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.acquisition_source \nORDER BY total_enrollments DESC LIMIT 5;", "valid": 1}]
[{"question": "How many enrollments used access code?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS total_access_code_used \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE LOWER(a.has_used_access_code) = 'yes';", "valid": 1}]
