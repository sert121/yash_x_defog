{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "How many unique enrollees were acquired through various acquisition sources in year 2020?", "sql": "SELECT a.acquisition_source, COUNT(DISTINCT a.unique_id) AS total_enrollees FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 GROUP BY a.acquisition_source;", "valid": 1}]
[{"question": "Which are the top 5 universities with the highest enrollments in STEM discipline in year 2019? ", "sql": "SELECT a.sfdc_account_name, COUNT(DISTINCT a.unique_id) AS total_enrollment FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2019 AND a.division ILIKE '%STEM%' GROUP BY a.sfdc_account_name ORDER BY total_enrollment DESC LIMIT 5;", "valid": 1}]
[{"question": "Which instructors had the highest number of enrollments in 2020 and taught in the Humanities division?", "sql": "SELECT a.instructor_name, COUNT(DISTINCT a.unique_id) as total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 AND LOWER(a.division)='humanities' GROUP BY a.instructor_name ORDER BY total_enrollments DESC;", "valid": 1}]
[{"question": "How many enrollments occurred each month in 2019 for courses in the \"Physics\" discipline?", "sql": "SELECT a.month, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2019 AND LOWER(a.discipline) = 'physics' GROUP BY a.month ORDER BY a.month;", "valid": 1}]
[{"question": "What is the total enrollment count for each product publisher in 2020?", "sql": "SELECT a.product_publisher, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 GROUP BY a.product_publisher;", "valid": 1}]
[{"question": "Which categories have the most enrollments across all years?", "sql": "SELECT a.category, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.category ORDER BY total_enrollments DESC;", "valid": 1}]
[{"question": "Which students in New York state had the most enrollments in 2018?", "sql": "SELECT a.sfdc_account_name, COUNT(DISTINCT a.unique_id) AS total_enrollment FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2018 AND LOWER(a.sfdc_state) = 'new york' GROUP BY a.sfdc_account_name ORDER BY total_enrollment DESC;", "valid": 1}]
[{"question": "What is the total count of paid enrollments per month in 2020?", "sql": "SELECT a.month, COUNT(DISTINCT a.unique_id) AS total_paid_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 AND LOWER(a.paid_unpaid) = 'paid' GROUP BY a.month ORDER BY a.month;", "valid": 1}]
[{"question": "Which course has the highest enrollment for the year 2019?", "sql": "SELECT a.course_name, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2019 GROUP BY a.course_name ORDER BY total_enrollments DESC LIMIT 1;", "valid": 1}]
[{"question": "How many enrollments had active access status from each acquisition source in 2020?", "sql": "SELECT a.acquisition_source, COUNT(DISTINCT a.unique_id) AS active_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = 2020 AND LOWER(a.student_subscription_status) = 'active access' GROUP BY a.acquisition_source;", "valid": 1}]
