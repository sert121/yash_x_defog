{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "Can I know how many enrollments we've had in the Physics discipline?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.discipline ILIKE '%Physics%';", "valid": 1}]
[{"question": "Can you tell me the top 5 territories with maximum enrollments?", "sql": "SELECT a.territory, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.territory ORDER BY total_enrollments DESC NULLS LAST LIMIT 5;", "valid": 1}]
[{"question": "I want to know about the number of active and expired enrollments.", "sql": "SELECT a.student_subscription_status, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.student_subscription_status IN ('Active Access','Expired Access') GROUP BY a.student_subscription_status;", "valid": 1}]
[{"question": "What are the top 5 disciplines where students have maximum enrolments?", "sql": "SELECT a.discipline, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.discipline ORDER BY total_enrollments DESC NULLS LAST LIMIT 5;", "valid": 1}]
[{"question": "Can you provide information on the number of paid and unpaid enrollments?", "sql": "SELECT a.paid_unpaid, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.paid_unpaid;", "valid": 1}]
[{"question": "Which authors have the highest number of enrollments?", "sql": "SELECT a.author_display_name, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.author_display_name ORDER BY total_enrollments DESC NULLS LAST LIMIT 1;", "valid": 1}]
[{"question": "Can you list down the number of enrollments for each course?", "sql": "SELECT a.course_name, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.course_name;", "valid": 1}]
[{"question": "I'd like to know how many enrollments have converted from trial to paid?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.conversion_date IS NOT NULL;", "valid": 1}]
[{"question": "Can you tell me which region had the highest number of enrollments last year?", "sql": "SELECT a.region, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.year = (SELECT max(b.year) - 1 FROM temp_achive_lp_sapling_combined_activations_ai b) GROUP BY a.region ORDER BY total_enrollments DESC NULLS LAST LIMIT 1;", "valid": 1}]
[{"question": "I am interested in knowing the number of enrollments for each publisher.", "sql": "SELECT a.product_publisher, COUNT(DISTINCT a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.product_publisher;", "valid": 1}]
