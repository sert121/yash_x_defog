{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "How many enrollments were there for each discipline in the year 2020?", "sql": "SQL\nSELECT a.discipline, COUNT(DISTINCT a.unique_id) AS total_enrollments \nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.year = 2020\nGROUP BY a.discipline;", "valid": 0}]
[{"question": "Which are the top 5 books in terms of activations in the discipline of Mathematics?", "sql": "SQL\nSELECT a.project_title, COUNT(DISTINCT a.unique_id) AS total_activations \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.discipline = 'Mathematics' AND LOWER(a.paid_unpaid)='paid' \nGROUP BY a.project_title\nORDER BY total_activations DESC \nLIMIT 5;", "valid": 0}]
[{"question": "Can you provide the list of disciplines which had most enrollments in 2020?", "sql": "SQL\nSELECT a.discipline, COUNT(DISTINCT a.unique_id) AS total_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.year = 2020\nGROUP BY a.discipline\nORDER BY total_enrollments DESC;", "valid": 0}]
[{"question": "Can you show me the publisher-wise titles activation count last year?", "sql": "SQL\nSELECT a.product_publisher, a.project_title, COUNT(DISTINCT a.unique_id) AS total_activations \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.year = 2020 AND LOWER(a.paid_unpaid)='paid' \nGROUP BY a.product_publisher, a.project_title;", "valid": 0}]
[{"question": "How many users have paid for their enrollment from the STEM division?", "sql": "SQL\nSELECT COUNT(DISTINCT a.unique_id) AS total_paid_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.division = 'STEM' AND LOWER(a.paid_unpaid)='paid';", "valid": 0}]
[{"question": "What is the total activation rate for the discipline 'Physics' in the last 5 years?", "sql": "SQL\nSELECT a.year, COUNT(DISTINCT a.unique_id) AS total_activations \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.discipline = 'Physics' AND a.year BETWEEN 2016 AND 2021 AND LOWER(a.paid_unpaid)='paid' \nGROUP BY a.year\nORDER BY a.year;", "valid": 0}]
[{"question": "What is the total number of enrollments for the course 'Biology 101' in 2020?", "sql": "SQL\nSELECT COUNT(DISTINCT a.unique_id) AS total_enrollments \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.course_name = 'Biology 101' AND a.year = 2020;", "valid": 0}]
[{"question": "What is the total revenue generated from paid subscriptions in 2020 in US dollars?", "sql": "SQL\nSELECT SUM(a.us_consumer_price) AS total_revenue \nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.year = 2020 AND LOWER(a.paid_unpaid)='paid';", "valid": 0}]
[{"question": "Provide the total number of activations for each book published by 'Publisher XYZ'.", "sql": "SQL\nSELECT a.project_title, COUNT(DISTINCT a.unique_id) AS total_activations \nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.product_publisher = 'Publisher XYZ' AND LOWER(a.paid_unpaid)='paid'\nGROUP BY a.project_title;", "valid": 0}]
[{"question": "Can you give me the number of enrollments per month in 2020 for the discipline 'Computer Science'?", "sql": "SQL\nSELECT a.month, COUNT(DISTINCT a.unique_id) AS total_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.year = 2020 AND a.discipline = 'Computer Science'\nGROUP BY a.month;", "valid": 0}]
