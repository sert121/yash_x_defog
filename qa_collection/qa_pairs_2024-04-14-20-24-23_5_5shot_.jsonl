{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "What is the total enrollment for each region?", "sql": "SELECT a.region, COUNT(DISTINCT a.unique_id) AS total_enrollment \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.region \nORDER BY total_enrollment DESC;", "valid": 1}]
[{"question": "How many users have active versus expired access status?", "sql": "SELECT a.student_subscription_status, COUNT(DISTINCT a.unique_id) AS total_users\nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE LOWER(a.student_subscription_status) IN ('active access', 'expired access')\nGROUP BY a.student_subscription_status;", "valid": 1}]
[{"question": "Can the enrollments be categorized by discipline?", "sql": "SELECT a.discipline, COUNT(DISTINCT a.unique_id) AS total_enrollment \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.discipline \nORDER BY total_enrollment DESC;", "valid": 1}]
[{"question": "What are the top 5 titles with the highest enrollments?", "sql": "SELECT a.project_title, COUNT(DISTINCT a.unique_id) AS total_enrollment \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.project_title \nORDER BY total_enrollment DESC \nLIMIT 5;", "valid": 1}]
[{"question": "How many students purchased from the student store per year?", "sql": "SELECT a.year, COUNT(DISTINCT a.unique_id) AS students_purchased_from_student_store\nFROM temp_achive_lp_sapling_combined_activations_ai a \nWHERE a.purchased_from_studentstore ILIKE '%Yes-Purchase%'\nGROUP BY a.year\nORDER BY a.year;", "valid": 1}]
[{"question": "What's the distribution of user acquisition sources?", "sql": "SELECT a.acquisition_source, COUNT(DISTINCT a.unique_id) AS number_of_users \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.acquisition_source \nORDER BY number_of_users DESC;", "valid": 1}]
[{"question": "How many students did each instructor have?", "sql": "SELECT a.instructor_name, COUNT(DISTINCT a.unique_id) AS number_of_students\nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.instructor_name \nORDER BY number_of_students DESC;", "valid": 1}]
[{"question": "How many enrollments were there in each division?", "sql": "SELECT a.division, COUNT(DISTINCT a.unique_id) AS number_of_enrollments \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.division \nORDER BY number_of_enrollments DESC;", "valid": 1}]
[{"question": "How many titles were there in each product status category?", "sql": "SELECT a.product_status, COUNT(DISTINCT a.project_title) AS number_of_titles \nFROM temp_achive_lp_sapling_combined_activations_ai a \nGROUP BY a.product_status \nORDER BY number_of_titles DESC;", "valid": 1}]
[{"question": "What is the total number of active and paid enrollments per author?", "sql": "SELECT a.author_display_name, COUNT(DISTINCT a.unique_id) AS total_active_paid_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.student_subscription_status ILIKE '%Active Access%' AND a.paid_unpaid ILIKE '%Paid%'\nGROUP BY a.author_display_name\nORDER BY total_active_paid_enrollments DESC;", "valid": 1}]
