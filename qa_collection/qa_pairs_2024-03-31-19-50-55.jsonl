{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \nYou have a two-step role: You need to come up with potential user questions that could be asked about the data. \nNow, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\nAlways follow these instructions for generating the user-question:\n1. Make sure that the questions are relevant to the data and are not ambiguous.\n2. Make sure that the questions are human-like.\n3. Make sure the question is not too confusing.\n\nAlways follow these instructions for generating the SQL query:\n1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n8. When a user asks for data by month, they are typically asking for data by both the month and year\n9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\nAs a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n{examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n```{table_metadata_ddl}```\nFollow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "How many titles are enrolled per year?", "sql": "SELECT a.year, COUNT (DISTINCT a.project_title) AS total_titles_enrolled FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.year ORDER BY a.year DESC;", "valid": 1}]
[{"question": "Can you provide a list of project titles and their copyrights year?", "sql": "SELECT DISTINCT a.project_title, a.copyright_year FROM temp_achive_lp_sapling_combined_activations_ai a ORDER BY a.copyright_year DESC;", "valid": 1}]
[{"question": "Could you show the top 5 regions with the most enrollments?", "sql": "SELECT a.region, COUNT (a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.region ORDER BY total_enrollments DESC LIMIT 5;", "valid": 1}]
[{"question": "What is the number of enrollments per discipline?", "sql": "SELECT a.discipline, COUNT (a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.discipline ORDER BY total_enrollments DESC;", "valid": 1}]
[{"question": "In which month do we usually have the maximum enrollments?", "sql": "SELECT a.month, COUNT (a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.month ORDER BY total_enrollments DESC LIMIT 1;", "valid": 1}]
[{"question": "How many titles are purchased from Studentstore each year?", "sql": "SELECT a.year, COUNT(a.project_title) AS total_titles_bought FROM temp_achive_lp_sapling_combined_activations_ai a WHERE a.purchased_from_studentstore='Yes-Purchase' GROUP BY a.year ORDER BY a.year DESC;", "valid": 1}]
[{"question": "What percentage of enrollments have used an access code?", "sql": "SELECT ((COUNT(a.unique_id) FILTER (WHERE a.has_used_access_code ='Yes')) * 100.0 / COUNT(a.unique_id)) AS percentage WITH using_access_code FROM temp_achive_lp_sapling_combined_activations_ai a;", "valid": 0}]
[{"question": "What are the top 5 schools with most enrollments?", "sql": "SELECT a.school, COUNT (a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.school ORDER BY total_enrollments DESC LIMIT 5;", "valid": 1}]
[{"question": "Which publishers have the most number of enrollments for their titles?", "sql": "SELECT a.product_publisher, COUNT(a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.product_publisher ORDER BY total_enrollments DESC;", "valid": 1}]
[{"question": "How many paid and unpaid enrollments are there?", "sql": "SELECT a.paid_unpaid, COUNT(a.unique_id) AS total_enrollments FROM temp_achive_lp_sapling_combined_activations_ai a GROUP BY a.paid_unpaid;", "valid": 1}]
