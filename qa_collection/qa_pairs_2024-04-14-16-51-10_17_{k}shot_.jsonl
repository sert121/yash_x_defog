{"system_prompt": "You are an expert and thoughtful SQL analyst and understand data very well. \n    You have a two-step role: You need to come up with potential user questions that could be asked about the data. \n    Now, based on the questions you have come up with, you need to write SQL queries that would help answer those questions.\n\n    Always follow these instructions for generating the user-question:\n    1. Make sure that the questions are relevant to the data and are not ambiguous.\n    2. Make sure that the questions are human-like.\n    3. Make sure the question is not too confusing.\n\n    Always follow these instructions for generating the SQL query:\n    1. Only use the table names and column names that are in the metadata schema. Do NOT use any other tables names or column names.\n    2. Do NOT create a JOIN statement or query multiple tables if the question can be answered using only one table.\n    3. When writing SELECT statements, always add the table alias as a prefix to the column name. For example, this SQL query is not valid: `SELECT a FROM table1 JOIN table2 ON table1.a = table2.a`. Instead, this query is correct: `SELECT table1.a FROM table1 JOIN table2 ON table1.a = table2.a`\n    4. SELECT statements should include all columns that are in the ORDER BY statements. For example, if the ORDER BY statement is `ORDER BY column_name`, then the SELECT statement should include `column_name`\n    5. Make sure that the GROUP BY statements do NOT contain an alias, and only contain original column names that exist in the schema.\n    6. If creating GROUP BY statements, always include columns with `id` in the column name in the SELECT and GROUP BY statements to ensure uniqueness.\n    7. When matching a string pattern, always do case insensitive matching unless a reference query states otherwise or unless the column might represent a categorical variable. You can chain multiple patterns using the OR operator. (e.g. LOWER(column_name) LIKE \"%stringtomatch1%\" OR LOWER(column_name) ILIKE \"%stringtomatch2%\")\n    8. When a user asks for data by month, they are typically asking for data by both the month and year\n    9. If the question cannot be answered given the database schema, always generate a query that says `SELECT 'Sorry, I could not answer that. Could you please rephrase your question?' AS answer;`. Do not give a closest approximation to the user's question. Do not use proxies for unavailable information.\n\n    As a reference, to generate a valid user question and corresponding SQL you can use the following examples:\n    {examples}", "user_prompt": "You need to generate 10 instances of (user_question, sql_code). The database schema is represented in the following CSV string:\n    ```{table_metadata_ddl}```\n    Follow the same format as the examples to produce the user question and SQL code. Separate each genrated pair with a separator #."}
[{"question": "Can you provide the distribution of enrollments by course for the discipline of Physics?", "sql": "SELECT a.course_name, COUNT(a.unique_id) AS number_of_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.discipline ILIKE '%Physics%'\nGROUP BY a.course_name\nORDER BY number_of_enrollments DESC;", "valid": 1}]
[{"question": "How many students have paid for subscriptions in the year 2020?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS number_of_paid_subscriptions\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.year = 2020 AND LOWER(a.paid_unpaid) = 'paid';", "valid": 1}]
[{"question": "Which project title had the most enrollments in the Humanities division?", "sql": "SELECT a.project_title, COUNT(DISTINCT a.unique_id) AS number_of_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.division ILIKE '%Humanities%'\nGROUP BY a.project_title\nORDER BY number_of_enrollments DESC\nLIMIT 1;", "valid": 1}]
[{"question": "What are the top 5 instructors with the most active access students?", "sql": "SELECT a.instructor_name, COUNT(DISTINCT a.unique_id) AS number_of_active_students\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.student_subscription_status = 'Active Access'\nGROUP BY a.instructor_name\nORDER BY number_of_active_students DESC\nLIMIT 5;", "valid": 1}]
[{"question": "Please provide the number of subscribers from each region in the year 2021.", "sql": "SELECT a.region, COUNT(DISTINCT a.unique_id) AS number_of_subscribers\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.year = 2021\nGROUP BY a.region\nORDER BY number_of_subscribers DESC;", "valid": 1}]
[{"question": "Can you list the courses with most enrollments, sorted by the course name?", "sql": "SELECT a.course_name, COUNT(DISTINCT a.unique_id) AS number_of_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a\nGROUP BY a.course_name\nORDER BY a.course_name;", "valid": 1}]
[{"question": "How many subscriptions were created each month in 2021?", "sql": "SELECT a.month, COUNT (DISTINCT a.unique_id) AS total_subscriptions\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.year = 2021\nGROUP BY a.month\nORDER BY a.month;", "valid": 1}]
[{"question": "How many subscriptions have been purchased from the student store?", "sql": "SELECT COUNT(DISTINCT a.unique_id) AS number_of_purchases\nFROM temp_achive_lp_sapling_combined_activations_ai a\nWHERE a.purchased_from_studentstore ILIKE '%Yes-Purchase%';", "valid": 1}]
[{"question": "List the most common acquisition source for enrollments?", "sql": "SELECT a.acquisition_source, COUNT(DISTINCT a.unique_id) AS total_enrollments\nFROM temp_achive_lp_sapling_combined_activations_ai a\nGROUP BY a.acquisition_source\nORDER BY total_enrollments DESC\nLIMIT 1;", "valid": 1}]
[{"question": "What is the average US net price for all subscriptions?", "sql": "SELECT AVG(a.us_net_price) AS average_us_net_price\nFROM temp_achive_lp_sapling_combined_activations_ai a;", "valid": 1}]
